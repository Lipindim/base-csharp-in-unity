using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Labyrinth
{

    public class InvulnerabilityBostController : IUpdate
    {

        private PlayerModel _playerModel;

        private float _effectDuration;

        public InvulnerabilityBostController(IEnumerable<InteractiveObject> interactiveObjects, PlayerModel playerModel)
        {
            _playerModel = playerModel;
            foreach (var interactiveObject in interactiveObjects)
            {
                if (interactiveObject is InvulnerabilityBost invulnerabilityBost)
                {
                    invulnerabilityBost.OnInteraction += InvulnerabilityBostOnInteraction;
                }
            }
        }

        private void InvulnerabilityBostOnInteraction(InteractiveObject interactiveObject)
        {
            var invulnerabilityBost = interactiveObject as InvulnerabilityBost;
            _playerModel.SetInvulnerability();
            _effectDuration = invulnerabilityBost.EffectDuration;
        }

        public void Update(float deltaTime)
        {
            ResetInvulnerability(deltaTime);
        }

        private void ResetInvulnerability(float deltaTime)
        {
            if (_effectDuration <= 0)
            {
                if (_playerModel.IsInvulnerability)
                {
                    _playerModel.ResetInvulnerability();
                }
            }
            else
            {
                _effectDuration -= deltaTime;
            }
        }
    }
}
